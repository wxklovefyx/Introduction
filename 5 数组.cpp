/*

数组

	概述：所谓数组，就是一个集合，里面存放了相同数据类型的数据元素；

	特点：

		・数组中的每个数据元素都是相同的数据类型；
		・数组是由连续的内存位置组成的；
		・定义数组的时候，必须声明数组的长度，没有不限制长度的数组；



	1、一维数组

		定义方式：

			1.数据类型 数组名 [数组长度]；―― 该方法自定义数组内容时，如果自定义的数据小于数组的长度，后面不会自动补0，而是显示该数组的内存地址；
			2.数据类型 数组名 [数组长度] = {值1，值2，....,}; ―― 如果自定义的数据小于数组的长度，会自动补0；
			3.数据类型 数组名[] = {值1，值2，....}；


		一维数组数组名：

			数组名称用途：
			
				・可以统计整个数组在内存中的长度，即整个数组占用内存空间的大小 ―― sizeof(数组名)

				・可以获取数组在内存中的首地址 ―― cout << 数组名 << endl; 或者 cout << &数组名[0] << endl;

				・可以知道数组中元素的个数 ―― sizeof(数组名) / sizeof(数组第一个元素);



	2、二维数组

		定义方式：

			1.数据类型 数组名 [行数][列数]；
			2.数据类型 数组名 [行数][列数] = {{数据1,数据2},{数据3,数据4}}; ―― 该定义方式更加直观，提高了代码的可读性；
			3.数据类型 数组名 [行数][列数] = {数据1,数据2,数据3,数据4};
			4.数据类型 数组名 [][列数] = {数据1,数据2,数据3,数据4}; ―― 注意：不能省略列数，可以省略行数；
	

		二维数组数组名：

			数组名称用途：

				・查看二维数组所占内存空间大小 ―― sizeof(arr);
				・查看二维数组第一行占用的内存空间大小 ―― sizeof(arr[0]);
				・查看二维数组第一个元素占用的内存空间大小 ―― sizeof(arr[0][0]);
				
				・查看二维数组的行数 ―― sizeof(arr) / sizeof(arr[0]);
				・查看二维数组的列数 ―― sizeof(arr[0]) / sizeof(arr[0][0]);

				・查看二维数组的首地址 ―― cout << arr;
				・查看二维数组第一行首地址（十六进制数据地址） ―― cout << arr[0];
				・查看二维数组第二行首地址（十进制数据地址） ―― cout << (int)arr[1];
				・查看二维数组第一个元素的首地址（十进制数据地址） ―― cout << (int)&arr[0][0];（访问某单个元素的地址时需要加取址符：&）


*/