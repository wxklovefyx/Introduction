/*	

程序流程结构包括：顺序结构、选择结构、循环结构



	1、顺序结构：程序按照顺序执行，不发生跳转；



	2、选择结构：依据条件是否满足，有选择的执行相应功能；


		if语句

			作用：执行满足条件的语句；

			if语句的三种形式：
				单行格式if语句 -- if(条件){条件满足执行的语句}
				多行格式if语句 -- if(条件){条件满足执行的语句}	else{条件不满足执行的语句}
				多条件的if语句 -- if(条件1){条件1满足执行的语句}	else if(条件2){条件2满足执行的语句} ....  else{条件都不满足执行的语句}

			嵌套if语句：在if语句中，可以嵌套使用if语句，达到更精确的条件判断；


		三目运算符

			作用：通过三目运算符实现简单的判断;

			语法：表达式1 ? 表达式2 : 表达式3

			注意：C++ 中三目运算符返回的是变量，可以对返回的变量继续赋值 ―― 例如：a = 10, b = 20; 执行 (a > b ? a : b) = 100; 程序会输出 b = 100;


		switch语句

			作用：执行多条件分支语句;

			语法：switch(表达式) ―― case 表达式值: ―― break；―― default:（相当于else）―― break;


		if 和 switch 区别？

			switch 缺点：判断时候表达式数据类型只能是整型（一个数字）或者字符型，不可以是一个区间;
			switch 优点：与if语句相比，switch语句的结构清晰，执行效率高;
			注意：case 执行后的语句里，如果没有 break，那么程序会一直向下执行;



	3、循环结构：依据条件是否满足，循环多次执行某段代码；


		while 循环语句

			作用：满足循环条件，执行循环语句；
			语法：while(循环条件) {循环语句}
			注意：需要避免死循环的使用；


		do...while 循环语句

			作用：满足循环条件，执行循环语句；
			语法：do{循环语句} while{循环条件}；
			注意：与 while循环 的区别在于 do....while循环 会先执行一次循环语句，再判断循环条件；


		for 循环语句

			作用：满足循环条件，执行循环语句；

			语法：for(起始表达式；条件表达式；末尾循环体) {循环语句;}

			本质：
				1、起始表达式是不参与循环的，用于对创建的变量进行声明；
				2、起始表达式、条件表达式、末尾循环体，均可以拆分到执行语句中执行 ―― for循环体可以写成 for( ; ; )

			执行顺序：
				0、起始表达式（只执行一次）―― 1、条件表达式 ―― 2、循环语句 ―― 3、末尾循环体


		嵌套循环

			作用：在循环体内再嵌套一层循环，用于解决一些实际问题；



	4、跳转语句


		break 语句

			作用：用于跳出选择结构或循环结构；

			break使用时机：

				1.出现在switch条件语句中，作用是终止case并跳出switch；

				2.出现在循环语句中，作用是跳出当前的循环语句；

				3.出现在嵌套循环中，退出最近的内层循环语句，不会影响最外层的循环语句；


		continue 语句

			作用：在循环语句中，跳过本次循环中余下尚未执行的语句，转而继续执行下一次循环；

			注意：continue 并没有使整个循环终止，而 break 会直接退出循环，不再执行下一次循环；


		goto 语句

			作用：可以无条件跳转语句；

			语法：goto 标记；

			解释：如果标记的名称存在，执行到goto语句时，会跳转到标记的位置；
			
			例如：{ 语句1； 语句2；goto FLAG（FLAG为标记）;	语句3； 语句4； FLAG:	语句5； 语句6；
			
			此时程序会从上至下顺序执行：语句1； 语句2； 语句5； 语句6； 即跳过两者之间的语句，转而去执行FLAG：标记后的语句

*/